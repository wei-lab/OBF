
 # MetaSpark.scala for MetaSpark
 # Copyright (c) 2015-2016 Wei Zhou,  Zilong  Tan, Chao Mai All Rights Reserved.
 #
 # Permission is hereby granted, free of charge, to any person
 # obtaining a copy of this software and associated documentation
 # files (the "Software"), to deal in the Software without
 # restriction, including without limitation the rights to use,
 # copy, modify, merge, publish, distribute, sublicense, and/or sell
 # copies of the Software, and to permit persons to whom the
 # Software is furnished to do so, subject to the following
 # conditions:
 #
 # The above copyright notice and this permission notice shall be
 # included in all copies or substantial portions of the Software.
 #
 # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 # EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 # OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 # NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 # HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 # WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 # FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 # OTHER DEALINGS IN THE SOFTWARE.
  
import contextlib
import os
import subprocess

cwd = os.getcwd()

# common variables
obf_dir = os.path.join(cwd, 'src')
googletest_build_dir = os.path.join(cwd, \
                                    'third_party/googletest/googletest/build')
googletest_include_dir = os.path.join(cwd, \
                                      'third_party/googletest/googletest/include')
doxygen_dir = 'build/doxygen'

# helper functions


@contextlib.contextmanager
def temp_chdir(path):
    starting_directory = os.getcwd()
    try:
        os.chdir(path)
        yield
    finally:
        os.chdir(starting_directory)

# build required libraries

try:
    os.mkdir(googletest_build_dir)
except OSError as e:
    print('the %s directory is exist.' % googletest_build_dir)

with temp_chdir(googletest_build_dir):
    subprocess.call(['cmake', '..'])
    subprocess.call(['make', '-j', '4'])

# generate doc

subprocess.call(['doxygen', 'Doxyfile'])

# set our required libraries
DEBUG = 'debug'
RELEASE = 'release'
DEFAULT_TARGET = DEBUG

libraries = ['-lpthread']
library_paths = ''
cxx = 'clang++'
cpp_defines = {}
cxx_flags = ['-std=c++14', '-Weverything', '-Wno-c++11-extensions',
             '-Wno-c++98-compat', '-Wno-padded']
debug_flags = ['-O0', '-g']
release_flags = ['-O2']
release_with_debug_info_flags = ['-O2', '-g']

# define the attributes of the build environment shared between
# both the debug and release builds
common_env = Environment(CXX=cxx)
common_env.Append(LIBS=libraries)
common_env.Append(LIBPATH=library_paths)
common_env.Append(CPPDEFINES=cpp_defines)
common_env.Append(CXXFLAGS=cxx_flags)
common_env['ENV']['TERM'] = os.environ['TERM']

# release build is derived from the common build environment...
release_env = common_env.Clone()
release_env.Append(CPPDEFINES=['RELEASE'])
release_env.Append(CXXFLAGS=release_flags)
release_env.VariantDir('build/release/test', 'test', duplicate=0)

# define debug build environment in a similar fashion...
debug_env = common_env.Clone()
debug_env.Append(CPPDEFINES=['DEBUG'])
debug_env.Append(CXXFLAGS=debug_flags)
debug_env.VariantDir('build/debug/test', 'test', duplicate=0)

target = ARGUMENTS.get('target', DEFAULT_TARGET)
print('target: %s' % target)

if target == DEBUG:
    mode_dir = 'build/debug'
    env = debug_env

    test_debug_env = debug_env.Clone()
    test_debug_env.Append(CPPPATH=[googletest_include_dir, obf_dir])
    test_debug_env.Append(LIBS='libgtest.a')
    test_debug_env.Append(LIBPATH=googletest_build_dir)

    env.SConscript('%s/test/sconscript' % mode_dir, {'env': test_debug_env})

elif target == RELEASE:
    mode_dir = 'build/release'
    env = release_env

    test_release_env = release_env.Clone()
    test_release_env.Append(CPPPATH=[googletest_include_dir, obf_dir])
    test_release_env.Append(LIBS='libgtest.a')
    test_release_env.Append(LIBPATH=googletest_build_dir)

    env.SConscript('%s/test/sconscript' % mode_dir, {'env': test_release_env})

# clean

if env.GetOption('clean'):
    # clean for google test lib
    subprocess.call(['rm', '-rf', googletest_build_dir])

    # clean for doxygen html
    subprocess.call(['rm', '-rf', doxygen_dir])
